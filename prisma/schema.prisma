// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  age           Int?      // Make age optional
  email         String    @unique
  emailVerified DateTime?
  password      String?   // For email/password login
  image         String?
  role          String    @default("user") // "user" or "admin"
  createdAt     DateTime  @default(now())
  answers       Answer[]
  reports       Report[]
  accounts      Account[]
  sessions      Session[]
  assessmentSessions AssessmentSession[]
  lastActiveAt       DateTime?
  preferredLanguage  String?   @default("en")
  gradeLevel         String?   // 9th, 10th, 11th, 12th, college
  schoolName         String?
  counselorEmail     String?
  parentEmail        String?
  notifications Notification[]
}

model Question {
  id         String   @id @default(uuid())
  section    String   // aptitude, personality, interest
  subDomain  String?  // For aptitude: logical, numerical, verbal, spatial; For personality: openness, conscientiousness, etc.; For interest: RIASEC codes
  type       String   // multiple-choice, likert, preference
  text       String
  options    Json     // Array of options
  order      Int      // Order in which questions should appear
  timeLimit  Int?     // Time limit in seconds (for aptitude questions)
  difficulty String?  // easy, medium, hard
  trait      String?  // For personality: specific trait being measured
  riasecCode String?  // For interest: R, I, A, S, E, C
  answers    Answer[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Answer {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  answer     String // Could be option index, likert value, etc.
  score      Float? // Calculated score for this answer
  version    Int      @default(1) // Track which assessment version this belongs to
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  timeSpent     Int?     // Time spent on this question in seconds
  isCorrect     Boolean? // For aptitude questions
  rawScore      Float?   // Raw score before normalization
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId, version])
}

model Report {
  id                 String   @id @default(uuid())
  userId             String
  version            Int      @default(1) // Track assessment versions
  isLatest           Boolean  @default(true) // Mark the most recent report
  aptitudeScores     Json    // { logical: 85, numerical: 78, verbal: 92, spatial: 70, overall: 81 }
  personalityScores  Json    // { openness: 75, conscientiousness: 82, extraversion: 60, agreeableness: 88, neuroticism: 45 }
  interestScores     Json    // { realistic: 70, investigative: 85, artistic: 60, social: 75, enterprising: 80, conventional: 55 }
  personalitySummary String // Generated personality summary
  interestSummary    String // Generated interest summary
  careerMatches      Json    // Enhanced with match percentages, skill requirements, education paths
  recommendations    Json    // Personalized recommendations and next steps
  strengths          Json    // Identified strengths and areas of excellence
  developmentAreas   Json    // Areas for improvement and development
  reliability        Json    // Cronbach's alpha and other reliability measures
  pdfUrl             String? // URL to generated PDF report
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, version])
}

// NextAuth.js Required Tables for Email Provider
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Add Career Database
model Career {
  id                 String   @id @default(uuid())
  title              String
  description        String   @db.Text
  riasecProfile      Json     // Required RIASEC scores for good match
  requiredSkills     Json     // Array of required skills
  educationLevel     String   // high_school, associate, bachelor, master, phd
  salaryRange        Json     // { min: 40000, max: 80000, median: 60000 }
  growthOutlook      String   // excellent, good, average, poor
  workEnvironment    String   // office, outdoor, laboratory, etc.
  personalityFit     Json     // Required Big Five traits
  industry           String   // Technology, Healthcare, Education, etc.
  workStyle          String   // independent, team, leadership
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

// Add Assessment Sessions for better tracking
model AssessmentSession {
  id              String    @id @default(uuid())
  userId          String
  section         String    // aptitude, personality, interest
  status          String    // in_progress, completed, abandoned
  version         Int       @default(1) // Track assessment version
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  totalQuestions  Int
  answeredCount   Int       @default(0)
  timeSpent       Int       @default(0) // Total time in seconds
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Add Settings for system configuration
model SystemSettings {
  id                    String   @id @default("system")
  scoringWeights        Json     // Assessment scoring weights
  timeouts              Json     // Session and question timeouts
  features              Json     // Feature toggles
  emailTemplates        Json     // Email notification templates
  careerMatchingWeights Json     // Weights for career matching algorithm
  updatedAt             DateTime @updatedAt
  updatedBy             String   // Admin who made the changes
}

// Add Notification system
model Notification {
  id          String    @id @default(uuid())
  userId      String?   // null for broadcast notifications
  title       String
  message     String    @db.Text
  type        String    // info, success, warning, error
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
